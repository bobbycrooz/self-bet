import Head from "next/head";
import Image from "next/image";
import { Button, InputField } from "@components";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { useFormik } from 'formik';
import {features} from "@utils"
import { useUser } from "@/context/userContext";

interface UserDetailsTypes {
  username?: string,
  email?: string,
  password?: string
}

export default function Home() {
  const [loginMode, setLoginMode] = useState(true);
  const [isAuth, setIsAuth] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { push, query, pathname } = useRouter();
  const [userDetails, setUserDetails] = useState<UserDetailsTypes>({})
  const {state, dispatch} = useUser()

  console.log("currently login mode is :", loginMode)

const registerSchema = {
  email: '',
  name: "",
  password: ""
}


const logingSchema = {
  name: '',
  password: ""
}


  // handlers--------------
  function handleAuthMode() {
    setLoginMode((p) => !p);
    window?.scrollTo({
      top: 0,
      left: 0,
      behavior: "smooth",
    });
  }

  function handleGoogle() {
    push("/auth/continue");
  }

  
  function handleForgotPassword() {
    push("/auth/forgot-password");
  }

  const formik = useFormik({
    initialValues: loginMode ? logingSchema : registerSchema,

    onSubmit: values => {
      console.log(values);
      dispatch({type: "STORE_USER", payload: values})
      setIsLoading(true)
      setTimeout(() => {
      setIsLoading(false)
      push("/dashboard");
      }, 2000);
    },
  });

  


  // useEffects -------------
  useEffect(() => {

		if (query.login) {
			setLoginMode(true);
		}
	}, [pathname, query.login]);

  return (
    <>
      <Head>
        <title>Selfbet Register</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="auth w-screen h-auto lg:h-[882px] row">
        {/* auth banner */}
        <div
          className={`auth_banner hidden lg:block ${
            loginMode ? "login_banner" : "sign_banner"
          } w-[60%] text-white h-full relative`}
        >
          {/* <Image src={"/images/auth-banner.png"} alt="logo" fill /> */}

          <div
            className={`auth_banner-content ${loginMode ? "login" : "signIn"} `}
          >
            <div className="w-[500px] ">
              <div className="logo">
                <Image
                  src={"/icons/Logo.svg"}
                  alt="logo"
                  width={200}
                  height={32}
                />
              </div>
              <h1 className="header display-md f-eb mt-12">
                {loginMode
                  ? "Welcome back to your betting platform!"
                  : "Take your betting experience to the next level!"}
              </h1>

              <div className="checks mt-6 space-y-3">
                {features.map((i, k) => (
                  <div key={k} className="check-item row  space-x-2">
                    <Image
                      src={"/icons/check-circle.svg"}
                      alt="logo"
                      width={20}
                      height={20}
                      className=""
                    />
                    <h4 className="txt-xl f-s">{i}</h4>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* ACTION  */}
        <div className="auth_content  w-full  lg:w-[40%] h-full p-4 md:px-24 lg:px-16">
          <div className="w-full  column md:mt-20 space-y-6 pb-8 md:pb-0">
            {/* logo */}
            <Image
              src={"/icons/logo-2.svg"}
              alt="logo"
              width={150}
              height={56}
            />

            {/* text */}
            <div className="auth_content-text">
              <h1 className="display-sm f-eb text-gray-900 space-y-2">
                {loginMode ? "Welcome back!" : "sign up"}
              </h1>
              <p className="text-md text-gray-500">
                {loginMode
                  ? "Log in to continue your betting journey"
                  : "Join now and start placing your bets!"}
              </p>
            </div>

            {/* google */}
            <div
              role="button"
              onClick={handleGoogle}
              title="sign in with your google account"
              className="google w-full row-center p-3 border border-[#E5E7EB] rounded-lg mt-12"
            >
              <Image
                src={"/icons/google.svg"}
                alt="logo"
                width={24}
                height={24}
              />
              <h1 className="txt-md text-gray-600 ml-2 f-s">
                {loginMode ? "Continue with Google" : "Sign up with Google"}
              </h1>
            </div>
            {/* line */}
            <div className="divider relative w-full h-4 ">
              <hr className="w-full border-dashed border mt-2 border-gray-200" />
              <h1 className="txt-xs bg-white f-m px-2 absolute left-1/2 top-0  -translate-x-1/2">
                {loginMode ? "or Log In with email" : "or Sign up with email"}
              </h1>
            </div>

            {/* form */}
            <form onSubmit={formik.handleSubmit} className="w-full space-y-6">
              <div className="space-y-4">
                <InputField
                  type={"text"}
                  label="username"
                  required
                  filedName="username"
                  place={"Enter a username"}
                  change={formik.handleChange}
                  value={formik.values.name}
                  name="name"

                />
                {!loginMode && (
                  <InputField
                  filedName="email"
                    type={"email"}
                    label="Email"
                    place={"***@gmail.com"}
                    change={formik.handleChange}
                    // @ts-ignore
                    value={formik.values.email}
                    name="email"
                  />
                )}

                <InputField
                  type={"password"}
                  label="Password"
                  place={"********"}
                  change={formik.handleChange}
                    value={formik.values.password}
                    name="password"
                


                />

                <div className="terms row-between">
                  <div className="middle space-x-2">
                    {!loginMode ? (
                      <>
                        <input
                          type="checkbox"
                          name="agree"
                          id="agree"
                          className="w-4 h-4 border-gray-300"
                        />

                        <h2 className="terms-text txt-sm f-m ">
                          I agree to the{" "}
                          <strong className="f-b">Terms & Conditions</strong>
                        </h2>
                      </>
                    ) : (
                      <>
                        <input
                          type="checkbox"
                          name="agree"
                          id="agree"
                          className="w-4 h-4 border-gray-300"
                        />

                        <h2 className="terms-text txt-sm f-m ">Remember me</h2>
                      </>
                    )}
                  </div>

                  {loginMode && (
                    <h1
                      role="button"
                      onClick={handleForgotPassword}
                      title="forgot password"
                      className="txt-sm f-b text-[#FF4B00]"
                    >
                      Forgot Password?
                    </h1>
                  )}
                </div>
              </div>

              <Button isLoading={isLoading} auth  text={"continue"} type={"submit"} full  />

              <div className="flex w-full justify-center mt-8">
                {!loginMode ? (
                  <h1 className="info  txt-md f-m">
                    Already have an account?{" "}
                    <strong
                      role="button"
                      title="Login into your existing account"
                      onClick={handleAuthMode}
                      className="f-eb"
                    >
                      log in here
                    </strong>
                  </h1>
                ) : (
                  <h1 className="info  txt-sm f-m">
                    Donâ€™t have an account?{" "}
                    <strong
                      role="button"
                      title="Create a new account"
                      onClick={handleAuthMode}
                      className="f-eb text-[#FF4B00]"
                    >
                      {" "}
                      Create account.
                    </strong>
                  </h1>
                )}
              </div>
            </form>
          </div>
        </div>
      </main>
    </>
  );
}
